#!@shell@

export PATH="@binPath@:${PATH}"

read -r -d '' HELP_MSG << EOM
NAME
    secret

SYNOPSIS
    secret [-v|--verbose] [-d|--decrypt] <-m|--machine>=host <-S|--service>=abc <-s|--secret>=token

EXAMPLE
    secret -v --machine=lido-mainnet-01 --service=cachix-deploy --secret=token
    secret -v --machine=lido-mainnet-01 --re-encrypt
    secret --re-encrypt-all

DESCRIPTION
    Secret is the command made for nix repos to get rid of the secret.nix when
    you are using agenix. Secret must be used with mcl-secrets and mcl-host-info
    modules from nixos-modules repository to work properly.

    By default, secrets are stored in machines/\${HOST}/secrets/service/
    if this directory exists, unless otherwise specified.

OPTIONS
    -v|--verbose          - Produce more verbose log messages.
    -f|--secrets-folder   - pecifies the location where secrets are saved.
    -m|--machine          - Machine for which you want to create a secret.
    -S|--service          - Service for which you want to create a secret.
    -s|--secret           - Secret you want to encrypt.
    -V|--vm               - Make secret for the vmVariant.
    -d|--decrypt          - Decrypt and print secret.
    -r|--re-encrypt       - Re-encrypt the secret.
    -a|--re-encrypt-all   - Re-encrypt secrets for all services for host."
EOM

set -euo pipefail

function nix_eval_machine() {
  target="${1}"
  shift
  if [[ "${machineType}" == 'vm' ]]; then
    subPath='virtualisation.vmVariant'
  else
    subPath='config'
  fi
  nix eval ${@} ".#nixosConfigurations.\"${machine}\".${subPath}.${target}"
}

function agenix_wrapper() {
  # Secrets folder is available in the secrets object in Nix.
  if [[ -z "${secretsFolder}" ]]; then
    local secretsFolder=$(
      nix_eval_machine mcl.secrets.services.${service}.encryptedSecretDir --raw \
        | sed -r 's#/nix/store/[a-z0-9]+-(source|secrets)/?##'
    )
    # If path has no subfolders it must be that of defaults.
    if [[ -z "${secretsFolder}" ]]; then
      local secretsFolder="modules/default-${machineType}-config/secrets"
    fi
  fi
  # The Agenix secrets definition file is generated by Nix.
  export rulesFile="$(nix_eval_machine "mcl.secrets.services.${service}.nix-file" --raw)"
  # Support providiing custom paths to Age identity files.
  if [[ -n "${AGE_IDENTITIES}" ]]; then
    export agenixArgs="-i $(echo "${AGE_IDENTITIES}" | sed -z '$ s/\n$//' | tr '\n' ' ' | sed -e 's/ / -i /g')"
  fi
  # Show what is being executed to the user.
  if [[ "${verbose}" == 'true' ]]; then
    agenixArgs="-v ${agenixArgs}"
    echo -e "{\n  cd ${secretsFolder}/${service};\n  ln -s ${rulesFile} secrets.nix;\n  agenix ${agenixArgs} ${@};\n  unlink secrets.nix;\n}" >&2
  fi
  ( # Script block necessary to limit scope of directory change.
    cd "${secretsFolder}/${service}";
    # Required due to: https://github.com/yaxitech/ragenix/issues/160
    ln -fs "${rulesFile}" secrets.nix;
    trap 'unlink secrets.nix' RETURN
    exec agenix ${agenixArgs} ${@};
  )
}

machine=""
service=""
secret=""
verbose=false
machineType=server
decrypt=false
reEncrypt=false
reEncryptAll=false
secretsFolder=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--verbose)           verbose=true;;
        -m|--machine=*)         machine="${1#*=}";;
        -f|--secrets-folder=*)  secretsFolder="${1#*=}";;
        -S|--service=*)         service="${1#*=}";;
        -s|--secret=*)          secret="${1#*=}";;
        -V|--vm)                machineType=vm;;
        -d|--decrypt)           decrypt=true;;
        -r|--re-encrypt)        reEncrypt=true;;
        -a|--re-encrypt-all)    reEncryptAll=true;;
        -h|--help)              echo "${HELP_MSG}"; exit 0;;
        *)                      echo "Unknown option: $1"; exit 1;;
    esac
    shift
done

if [[ "${reEncryptAll}" == true && -z "${machine}" ]]; then
  echo "You must specify machine"; exit 1
elif [[ "${reEncrypt}" == true && (-z "${machine}" || -z "${service}") ]]; then
  echo "You must specify machine and service"; exit 1
elif [[ "${reEncrypt}" == false && "${reEncryptAll}" == false && (-z "${machine}" || -z "${service}" || -z "${secret}") ]]; then
  echo "You must specify machine, service, and secret"; exit 1
fi

if [[ "${reEncryptAll}" == true ]]; then
  for service in $(nix_eval_machine "mcl.secrets.services" --apply builtins.attrNames --json | jq -r '.[]'); do
    echo "Re-encripting secrets for: ${service}"
    agenix_wrapper -r
  done
else
  if [[ "${reEncrypt}" == true ]]; then
    agenix_wrapper -r
  elif [[ "${decrypt}" == true ]]; then
    agenix_wrapper -d "${secret}.age"
  else
    agenix_wrapper -e "${secret}.age"
  fi
fi
